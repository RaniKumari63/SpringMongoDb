package com.solution;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;



import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.http.HttpStatus;

import com.solution.model.Address;
import com.solution.model.CreateCustomerRequest;
import com.solution.model.CreateEmployeeRequest;
import com.solution.model.Employee;
import com.solution.model.UpdateCustomerRequest;
import com.solution.model.UpdateEmployeeRequest;
import com.solution.service.impl.EmployeeServiceImpl;
@TestMethodOrder(OrderAnnotation.class)
@SpringBootTest(classes={EmployeeServiceImplTest.class})
public class EmployeeServiceImplTest {
@InjectMocks
private EmployeeServiceImpl employeeServiceImpl;
@Mock
private MongoTemplate mongoTemplate;

public List<Employee> employees;
Employee employee1;
Employee employee2;
Employee employee3;
Address address;
CreateEmployeeRequest request;
UpdateEmployeeRequest uprequest;
@BeforeEach
public void init()
{
	address = new Address("lane7", "street7", "city7", "state7", "country", "zipcode6");
	request=new CreateEmployeeRequest()
			request = new CreateEmployeeRequest("aaaa", "aaa@gmail.com", "man1", "mmmm1", "mmm1@gmail.com", "33214325",address,"aaa");
    uprequest= new UpdateEmployeeRequest("emp1", "aaaa","aaa@gmail.com", "87897",address, "customer");
	employee1=new Employee("emp1","aaaa","aaa@gmail.com","man1","mmmm1","mmm1@gmail.com","33214325",address,"aaa","pending");
	employee2=new Employee("emp2","bbbb","bbb@gmail.com","man1","mmmm1","mmm1@gmail.com","675465554",address,"bbb","pending");
	employee3=new Employee("emp3","cccc","ccc@gmail.com","man1","mmmm1","mmm1@gmail.com","33214325",address,"aaa","pending");

	employees = new ArrayList<Employee>();

	employees.add(employee1);
	employees.add(employee1);
	employees.add(employee1);
}
@Test
@Order(1)
public void getEmployeesTest()
{ 
	
	when(mongoTemplate.find(Mockito.any(Query.class), Mockito.eq(Employee.class))).thenReturn(employees);
	

	assertEquals(HttpStatus.FOUND, employeeServiceImpl.getEmployees("aaa").getStatusCode());
}

@Test
@Order(2)
public void getEmployeeByIdTest()
{
	when(mongoTemplate.findOne(Mockito.any(Query.class), Mockito.eq(Employee.class))).thenReturn(employee1);
	assertEquals(HttpStatus.FOUND,employeeServiceImpl.getEmployeeById("emp1").getStatusCode());
	when(mongoTemplate.findOne(Mockito.any(Query.class), Mockito.eq(Employee.class))).thenReturn(employee2);
	assertEquals(HttpStatus.FOUND,employeeServiceImpl.getEmployeeById("emp2").getStatusCode());
}
@Test
@Order(3)
public void createEmployeeTest()
{
	when(mongoTemplate.findOne(Mockito.any(Query.class),Mockito.eq(Employee.class))).thenReturn(employee1);
	when(mongoTemplate.insert(employee1)).thenReturn(employee1);
	assertEquals(HttpStatus.CREATED,employeeServiceImpl.createEmployee(null))
}
}


